 /***************************************************************************** 
  * Project: RooFit                                                           * 
  *                                                                           * 
  * This code was autogenerated by RooClassFactory                            * 
  *****************************************************************************/ 

 // Your description goes here... 

 #include "MGMPiecewiseFunction.hh" 
 #include "RooMsgService.h" 


 ClassImp(MGMPiecewiseFunction) 

 MGMPiecewiseFunction::MGMPiecewiseFunction(const char *name, 
                        const char *title, 
                        RooAbsReal& _var) :
   RooAbsReal(name,title), 
   fVariable("variable","variable",this,_var)
 { 
 } 


 MGMPiecewiseFunction::MGMPiecewiseFunction(const MGMPiecewiseFunction& other, const char* name) :  
   RooAbsReal(other,name), 
   fSetOfRegions(other.fSetOfRegions),
   fVariable("variable",this,other.fVariable)
 { 
 } 



 Double_t MGMPiecewiseFunction::evaluate() const 
 { 
   MGMRegion temp( fVariable, fVariable);
   if ( fSetOfRegions.find( temp ) == fSetOfRegions.end() ) return 1; 
   // Otherwise it is in a region which we have inserted, return 0
   //return 0;
   return 1e-300;
 } 

Bool_t MGMPiecewiseFunction::InsertNewRegion(Double_t beginning, Double_t end)
{
  if (beginning >= end) {
    coutW(Eval) << "Region mal-formed, beginning >= end" << std::endl; 
    return false;
  }
  // Try to insert it 
  std::pair<std::set<MGMRegion, MGMRegionCompare>::iterator, bool> ret; 
  ret = fSetOfRegions.insert(MGMRegion(beginning, end));
  if (!ret.second) {
    coutW(Eval) << "Attempt to insert overlapping regions." << std::endl; 
    return false;

  }
  return true;
} 

