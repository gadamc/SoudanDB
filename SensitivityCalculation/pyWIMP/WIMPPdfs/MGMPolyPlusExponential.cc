 /***************************************************************************** 
  * Project: RooFit                                                           * 
  *                                                                           * 
  * This code was autogenerated by RooClassFactory                            * 
  *****************************************************************************/ 

 // Your description goes here... 

 #include "MGMPolyPlusExponential.hh" 
 #include <math.h> 

 ClassImp(MGMPolyPlusExponential) 

 MGMPolyPlusExponential::MGMPolyPlusExponential(const char *name, const char *title, 
                        RooAbsReal& _energy,
                        RooAbsReal& _exp_constant,
                        RooAbsReal& _relative_exp_content) : 
   RooAbsPdf(name,title), 
   fEnergy("fEnergy","Energy",this,_energy),
   fExpConstant("fExpConstant","Exponential Constant",this,_exp_constant),
   fExpRelativeContent("fExpRelativeContent","Exp Relative Content",this,_relative_exp_content)
 { 
 } 


 MGMPolyPlusExponential::MGMPolyPlusExponential(const MGMPolyPlusExponential& other, const char* name) :  
   RooAbsPdf(other,name), 
   fEnergy("fEnergy",this,other.fEnergy),
   fExpConstant("fExpConstant",this,other.fExpConstant),
   fExpRelativeContent("fExpRelativeContent",this,other.fExpRelativeContent)
 { 
 } 



 Double_t MGMPolyPlusExponential::evaluate() const 
 { 
   Double_t func = (1 - fExpRelativeContent) + fExpRelativeContent*exp(fExpRelativeContent*fExpConstant*fEnergy);
   return ( func > 1e-15 ? func : 1e-15 );
 } 

Int_t MGMPolyPlusExponential::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
{
   if (matchArgs(allVars, analVars, fEnergy)) return 1;
   return 0;
} 

Double_t MGMPolyPlusExponential::integralEvaluateAt(Double_t value) const
{

   Double_t func = (1 - fExpRelativeContent)*value + exp(fExpRelativeContent*fExpConstant*value)/fExpConstant;
   return func;
}

Double_t MGMPolyPlusExponential::analyticalIntegral(Int_t code, const char* rangeName) const
{
   assert(code==1);
   Double_t max = fEnergy.max(rangeName);
   Double_t min = fEnergy.min(rangeName);
   return integralEvaluateAt(max) - integralEvaluateAt(min);
                   
}


