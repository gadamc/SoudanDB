/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef _MGMPiecewiseFunction_hh_
#define _MGMPiecewiseFunction_hh_

#include "RooRealProxy.h"
#include "RooAbsReal.h"
#include <set>
 
struct MGMRegion {
    Double_t beginning;
    Double_t end;
    MGMRegion(Double_t abeg = 0, Double_t anend = 0): beginning(abeg), end(anend) {}
};

struct MGMRegionCompare {
    // This function allows us to make sure we have no overlapping
    // regions
    bool operator() (const MGMRegion& lhs, const MGMRegion& rhs) const
    { return lhs.end < rhs.beginning; }
};

class MGMPiecewiseFunction : public RooAbsReal {
public:
  MGMPiecewiseFunction() {} ; 
  MGMPiecewiseFunction(const char *name, const char *title,
	      RooAbsReal& _var);
  MGMPiecewiseFunction(const MGMPiecewiseFunction& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new MGMPiecewiseFunction(*this,newname); }
  inline virtual ~MGMPiecewiseFunction() { }

  // Returns false if can't be inserted (overlap or poor construction)
  virtual Bool_t InsertNewRegion(Double_t beginning, Double_t end);
  virtual inline void ClearRegions() { fSetOfRegions.clear(); }

protected:

  std::set<MGMRegion, MGMRegionCompare> fSetOfRegions; 
  RooRealProxy fVariable ;
  
  Double_t evaluate() const ;

private:

  ClassDef(MGMPiecewiseFunction,1) // Your description goes here...
};
 
#endif
