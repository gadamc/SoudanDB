/*****************************************************************************
 * Project: MGMWimpSensitivity                                               *
 *                                                                           *
 * This code was autogenerated by RooClassFactory, and modified by mgmarino  * 
 *****************************************************************************/


/*
 * This class handles the differential rate of a WIMP interaction,
 * including escape velocity.  The formulae are taken from Lewin/Smith
 * (1996)
 */
#ifndef _MGMWimpDiffRateEscapeVelPdf_hh_
#define _MGMWimpDiffRateEscapeVelPdf_hh_

#include "MGMWimpDiffRatePdf.hh"
#include "RooRealProxy.h"
#include "RooAbsReal.h"
 
class MGMWimpDiffRateEscapeVelPdf : public MGMWimpDiffRatePdf {
public:
  MGMWimpDiffRateEscapeVelPdf() {} ; 
  MGMWimpDiffRateEscapeVelPdf(const char *name, const char *title,
	      RooAbsReal& _v_sub_0,
	      RooAbsReal& _v_sub_min,
	      RooAbsReal& _v_sub_E,
	      RooAbsReal& _R_sub_0,
	      RooAbsReal& _E_sub_0,
	      RooAbsReal& _r,
	      RooAbsReal& _v_sub_esc,
	      MGMVWimpFormFactor& _form_factor = MGMVWimpFormFactor::DefaultFormFactor());
  MGMWimpDiffRateEscapeVelPdf(const MGMWimpDiffRateEscapeVelPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new MGMWimpDiffRateEscapeVelPdf(*this,newname); }
  inline virtual ~MGMWimpDiffRateEscapeVelPdf() { }

protected:

  RooRealProxy v_sub_esc ;

  
  virtual Double_t EvaluatePDF() const ;
  virtual Double_t getK0OverK1() const ;

private:

  ClassDef(MGMWimpDiffRateEscapeVelPdf,1) // Your description goes here...
};
 
#endif
