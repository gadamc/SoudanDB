/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef _MGMWimpDiffRateBasicPdf_hh_
#define _MGMWimpDiffRateBasicPdf_hh_

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooAbsReal.h"
#include "MGMVWimpFormFactor.hh"
 
class MGMWimpDiffRateBasicPdf : public RooAbsPdf {
public:
  MGMWimpDiffRateBasicPdf() {} ; 
  MGMWimpDiffRateBasicPdf(const char *name, const char *title,
	      RooAbsReal& _R_sub_0,
	      RooAbsReal& _E_sub_0,
              RooAbsReal& _Q,
	      RooAbsReal& _r,
              MGMVWimpFormFactor& _form_factor = MGMVWimpFormFactor::DefaultFormFactor());
  MGMWimpDiffRateBasicPdf(const MGMWimpDiffRateBasicPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new MGMWimpDiffRateBasicPdf(*this,newname); }
  inline virtual ~MGMWimpDiffRateBasicPdf() { }
  virtual ExtendMode extendMode() const { return MustBeExtended; }
  using RooAbsPdf::expectedEvents;
  virtual Double_t expectedEvents(const RooArgSet* nset) const 
    { Double_t temp = getNorm(nset); //cout << temp << endl; 
      return temp;}

protected:

  RooRealProxy R_sub_0 ;
  RooRealProxy E_sub_0 ;
  RooRealProxy Q ;
  RooRealProxy r ;
  RooRealProxy form_factor ;
  
  //! Overload the Evaluate PDF when deriving from this class
  virtual Double_t EvaluatePDF() const;
  virtual Double_t EvaluateFormFactor() const;
  virtual Double_t evaluate() const ;

private:

  ClassDef(MGMWimpDiffRateBasicPdf,1) // Your description goes here...
};
 
#endif
